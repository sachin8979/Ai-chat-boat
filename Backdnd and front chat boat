
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SpendWise Chatbot</title>
<link rel="stylesheet" href="styles.css">
<link
href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap
" rel="stylesheet">
</head>
<body>
<div class="chat-container">
<header class="chat-header">
<h1>SpendWise</h1>
<p>Your personal finance assistant</p>
</header>
<div class="chat-messages" id="chat-messages">
<div class="bot-message">
<div class="message-content">
<strong>ü§ñ Bot:</strong> Welcome to your Personal Finance Coach!
Type 'help' to see what I can do.
</div>
</div>
</div>
<div class="chat-input">
<input type="text" id="user-input" placeholder="Type your message here...">
<button id="send-button">Send</button>
</div>
</div>
<script src="chatbot.js"></script>
</body>
</html>
CSS code:
body {
font-family: 'Roboto', sans-serif;
background: linear-gradient(to bottom right, #ffffff, #ffffff);
margin: 0;
padding: 0;
display: flex;
justify-content: center;
align-items: center;
min-height: 100vh;
}
.chat-container {
width: 90%;
max-width: 600px;
background-color: rgb(69, 69, 69);
border-radius: 10px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
overflow: hidden;
}
.chat-header {
background: linear-gradient(to right, #00aa99, #0066cc);
color: white;
padding: 20px;
text-align: center;
}
.chat-header h1 {
margin: 0;
font-size: 1.5rem;
}
.chat-header p {
margin: 5px 0 0;
opacity: 0.8;
}
.chat-messages {
height: 400px;
overflow-y: auto;
padding: 20px;
background-color: #f9f9f9;
}
.user-message, .bot-message {
margin-bottom: 15px;
padding: 10px 15px;
border-radius: 18px;
max-width: 80%;
word-wrap: break-word;
}
.user-message {
background-color: #648dff;
margin-left: auto;
border-bottom-right-radius: 5px;
}
.bot-message {
background-color: #6cc4ff;
border: 1px solid #e0e0e0;
margin-right: auto;
border-bottom-left-radius: 5px;
}
}
.message-content {
line-height: 1.5;
.chat-input {
display: flex;
padding: 15px;
background-color: white;
border-top: 1px solid #eee;
}
#user-input {
flex: 1;
padding: 10px 15px;
border: 1px solid #ddd;
border-radius: 20px;
outline: none;
font-size: 16px;
}
#send-button {
background: linear-gradient(to right, #00aa99, #0066cc);
color: white;
border: none;
border-radius: 20px;
padding: 10px 20px;
margin-left: 10px;
cursor: pointer;
transition: background 0.5s ease-in-out;
}
#send-button:hover {
background: linear-gradient(to right, #0066cc, #00aa99);
transform: scale(1.05);
}
/* Responsive design */
@media (max-width: 500px) {
.chat-container {
width: 100%;
height: 100vh;
border-radius: 0;
}
}
.chat-messages {
height: calc(100vh - 180px);
}
JAVASCRIPT code:
// chatbot-api.js - Expense Tracker Chatbot with API Integration
// API Configuration for Gemini
const apiKey = 'AIzaSyB_052psl-hDfiXzCxVqBWLQuJnHahILOw'; // Replace with your
Gemini API key
const API_BASE_URL =
'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';
// DOM elements
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
// Event listeners
sendButton.addEventListener('click', sendMessage);
userInput.addEventListener('keypress', function(e) {
if (e.key === 'Enter') sendMessage();
});
// AIzaSyB_052psl-hDfiXzCxVqBWLQuJnHahILOw
// ======================
// API HELPER FUNCTIONS
// ======================
async function queryGemini(prompt) {
try {
// ... existing code ...
if (!data.candidates || !data.candidates[0].content.parts[0].text) {
throw new Error('Unexpected response format from Gemini');
}
return data.candidates[0].content.parts[0].text;
} catch (error) {
console.error('Gemini Error:', error);
return "I'm having trouble understanding that. Could you rephrase or ask about
your expenses?";
}
}
function handleUnauthorized() {
addBotMessage("üîí Your session has expired. Redirecting to login...");
setTimeout(() => {
window.location.href = '/login?redirect=' +
encodeURIComponent(window.location.pathname);
}, 2000);
return null;
}
// ======================
// CORE CHATBOT FUNCTIONS (API-ENABLED)
// ======================
async function addExpense(amount, category) {
const loadingMsg = addLoadingMessage("Adding your expense...");
try {
const data = {
amount: parseFloat(amount),
category: category,
date: new Date().toISOString()
};
const response = await makeApiRequest('/expenses', 'POST', data);
if (response) {
return true;
addBotMessage(`‚úÖ Added $${amount} to '${category}'`);
}
} catch (error) {
console.error('Error adding expense:', error);
addBotMessage("‚ùå Failed to add expense. Please try again.");
} finally {
removeLoadingMessage(loadingMsg);
}
return false;
}
async function showExpensesSummary(timeframe = 'month') {
const loadingMsg = addLoadingMessage("Generating your expense report...");
try {
const summary = await
makeApiRequest(`/expenses/summary?timeframe=${timeframe}`);
if (summary) {
let message = `üìä <strong>${timeframe.charAt(0).toUpperCase() +
timeframe.slice(1)}ly Expense Summary:</strong><br><br>`;
// Display by categories
if (summary.categories && summary.categories.length > 0) {
summary.categories.forEach(cat => {
message += `- ${cat.name}: $${cat.total.toFixed(2)}<br>`;
});
message += `<br>`;
}
// Display totals
if (summary.total) {
message += `üí∏ <strong>Total Spent:</strong>
$${summary.total.toFixed(2)}<br>`;
}
// Display budget comparison if available
if (summary.budgetComparison) {
const percentage = (summary.total / summary.budgetComparison.budget)
* 100;
message += `<br>üìà <strong>Budget:</strong>
$${summary.budgetComparison.budget.toFixed(2)}<br>`;
message += `You've spent ${percentage.toFixed(1)}% of your budget`;
if (percentage > 100) {
message += ` ‚ö†Ô∏è Over budget!`;
}
}
addBotMessage(message);
}
} catch (error) {
console.error('Error fetching summary:', error);
addBotMessage("‚ùå Couldn't load your expenses. Please try again later.");
} finally {
removeLoadingMessage(loadingMsg);
}
}
async function setSavingsGoal(amount) {
const loadingMsg = addLoadingMessage("Updating your savings goal...");
try {
const response = await makeApiRequest('/savings/goal', 'POST', {
goalAmount: parseFloat(amount)
});
if (response) {
addBotMessage(`üéØ Savings goal set to $${amount}`);
return true;
}
} catch (error) {
console.error('Error setting goal:', error);
addBotMessage("‚ùå Failed to set savings goal. Please try again.");
} finally {
removeLoadingMessage(loadingMsg);
}
return false;
}
async function addToSavings(amount) {
const loadingMsg = addLoadingMessage("Adding to your savings...");
try {
const response = await makeApiRequest('/savings/deposit', 'POST', {
amount: parseFloat(amount)
});
if (response) {
addBotMessage(`üí∞ Added $${amount} to savings. New balance:
$${response.newBalance.toFixed(2)}`);
return true;
}
} catch (error) {
console.error('Error adding to savings:', error);
addBotMessage("‚ùå Failed to add to savings. Please try again.");
} finally {
removeLoadingMessage(loadingMsg);
}
return false;
}
async function checkSavingsProgress() {
const loadingMsg = addLoadingMessage("Checking your savings progress...");
try {
const progress = await makeApiRequest('/savings/progress');
if (progress) {
const percent = (progress.currentSaved / progress.goalAmount) * 100;
let message = `üöÄ <strong>Savings Progress:</strong><br>`;
message += `- Saved: $${progress.currentSaved.toFixed(2)}<br>`;
message += `- Goal: $${progress.goalAmount.toFixed(2)}<br>`;
message += `- Progress: ${percent.toFixed(1)}%`;
if (percent >= 100) {
message += ` üéâ Congratulations! You've reached your goal!`;
} else if (percent > 75) {
message += ` üëè Almost there!`;
}
addBotMessage(message);
}
} catch (error) {
console.error('Error checking progress:', error);
addBotMessage("‚ùå Couldn't check your savings progress. Please try again
later.");
} finally {
removeLoadingMessage(loadingMsg);
}
}
// ======================
// UI HELPER FUNCTIONS
// ======================
function addUserMessage(message) {
const messageDiv = document.createElement('div');
messageDiv.className = 'user-message';
messageDiv.innerHTML = `<div class="message-content"><strong>You:</strong>
${sanitizeInput(message)}</div>`;
chatMessages.appendChild(messageDiv);
scrollToBottom();
}
function addBotMessage(message) {
const messageDiv = document.createElement('div');
messageDiv.className = 'bot-message';
messageDiv.innerHTML = `<div class="message-content"><strong>ü§ñ
Bot:</strong> ${message}</div>`;
chatMessages.appendChild(messageDiv);
scrollToBottom();
}
function addLoadingMessage(text) {
const id = 'loading-' + Date.now();
const messageDiv = document.createElement('div');
messageDiv.id = id;
messageDiv.className = 'bot-message loading-message';
messageDiv.innerHTML = `<div class="message-content">${text}</div>`;
chatMessages.appendChild(messageDiv);
scrollToBottom();
return id;
}
function removeLoadingMessage(id) {
const element = document.getElementById(id);
if (element) element.remove();
}
function scrollToBottom() {
chatMessages.scrollTop = chatMessages.scrollHeight;
}
function sanitizeInput(input) {
const div = document.createElement('div');
div.textContent = input;
return div.innerHTML;
}
// ======================
// MAIN CHAT PROCESSING
// ======================
async function processUserInput(input) {
input = input.toLowerCase().trim();
if (input === 'exit') {
addBotMessage("üëã Goodbye! Keep crushing your goals.");
}
else if (input === 'help') {
showHelp();
}
else if (input.startsWith("add expense")) {
const parts = input.split(' ');
if (parts.length >= 4 && !isNaN(parts[2])) {
const amount = parts[2];
const category = parts.slice(3).join(' ');
addExpense(amount, category);
} else {
addBotMessage("‚ùå Format: add expense &lt;amount&gt;
&lt;category&gt;");
}
}
// ... keep all your existing command handlers ...
else {
// For any other input, query Gemini
const loadingMsg = addLoadingMessage("Thinking...");
try {
const geminiResponse = await queryGemini(`You are a financial assistant
chatbot. The user asked: "${input}". Provide a helpful response.`);
removeLoadingMessage(loadingMsg);
addBotMessage(geminiResponse);
} catch (error) {
removeLoadingMessage(loadingMsg);
addBotMessage("ü§î I'm not sure how to help with that. Type 'help' to see
what I can do.");
}
}
}
function showHelp() {
addBotMessage(`
<strong>üí° I can help with:</strong><br><br>
‚Ä¢ <strong>Add expense [amount] [category]</strong> - Track spending<br>
‚Ä¢ <strong>Show expenses</strong> - Monthly summary<br>
‚Ä¢ <strong>Show weekly expenses</strong> - Weekly breakdown<br>
‚Ä¢ <strong>Set goal [amount]</strong> - Savings target<br>
‚Ä¢ <strong>Save [amount]</strong> - Add to savings<br>
‚Ä¢ <strong>Progress</strong> - Savings status<br>
‚Ä¢ <strong>Help</strong> - Show this message
`);
}
function sendMessage() {
const message = userInput.value.trim();
if (message) {
addUserMessage(message);
userInput.value = '';
processUserInput(message);
}
}
